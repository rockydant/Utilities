@using Admin.BusinessCardDashboard.Services
@using Admin.BusinessCardDashboard.Models

@namespace Admin.BusinessCardDashboard
@inherits ModuleBase
@inject IBusinessCardDashboardService BusinessCardDashboardService
@inject NavigationManager NavigationManager

<div class="card o-hidden border-0 shadow-lg my-5">
    <div class="card-body p-0">
        <!-- Nested Row within Card Body -->
        <div class="row">
            <div class="col-lg-12">
                <div class="p-5">
                    <div class="text-center">
                        <h1 class="h4 text-gray-900 mb-4">Digital Business Card Creator</h1>
                    </div>
                    <form class="user">
                        <div class="form-group row">
                            <div class="col-sm-6 mb-3 mb-sm-0">
                                <input type="text" class="form-control form-control-user" id="firstNameInput"
                                       placeholder="Business Name" @bind="@_name">
                            </div>
                            <div class="col-sm-6">
                                <input type="text" class="form-control form-control-user" id="lastNameInput"
                                       placeholder="Business Type" @bind="@_type">
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-12 mb-3 mb-sm-0">
                                <FileManager UploadMultiple="false" ShowFiles="false" FileId="@_fileid" @ref="_fileManager" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <button type="button" class="btn btn-success" @onclick="Save">Create</button>
                        </div>

                        @if (image != null)
                        {
            <div class="form-group row justify-center-center">
                <div class="col-sm-5">
                    <img class="img-thumbnail" src="data:image/png;base64,@Convert.ToBase64String(image)">
                </div>
            </div>}

                        <div class="row">
                            <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="4"
                                        AllowSorting="true" Data="@_BusinessCardDashboards" TItem="BusinessCardDashboard" ColumnWidth="200px" AllowColumnResize="true">
                                <Columns>
                                    <RadzenGridColumn TItem="BusinessCardDashboard" Property="Name" Title="Name" />
                                    <RadzenGridColumn TItem="BusinessCardDashboard" Property="Type" Title="Type" />
                                    <RadzenGridColumn TItem="BusinessCardDashboard" Property="LinkUrl" Title="Photo">
                                        <Template Context="data">
                                            <img class="img-thumbnail" src="@data.LinkUrl">
                                        </Template>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="BusinessCardDashboard" Property="LinkUrl" Title="Photo">
                                        <Template Context="data">
                                            <img class="img-thumbnail" src="data:image/png;base64,@data.QrCode">
                                        </Template>
                                    </RadzenGridColumn>
                                    <RadzenGridColumn TItem="BusinessCardDashboard" Context="order" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                                        <Template Context="data">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => Delete(data))">
                                            </RadzenButton>
                                        </Template>
                                        <EditTemplate Context="data">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => Delete(data))">
                                            </RadzenButton>
                                        </EditTemplate>
                                    </RadzenGridColumn>
                                </Columns>
                            </RadzenGrid>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<BusinessCardDashboard> _BusinessCardDashboards;

    private int _fileid = -1;

    int _id;
    string _name = string.Empty;
    string _type = string.Empty;
    string _linkUrl = string.Empty;
    string _qrCode = string.Empty;

    private byte[] image = null;
    FileManager _fileManager;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _BusinessCardDashboards = await BusinessCardDashboardService.GetBusinessCardDashboardsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading BusinessCardDashboard {Error}", ex.Message);
            AddModuleMessage("Error Loading BusinessCardDashboard", MessageType.Error);
        }
    }

    private async Task Delete(BusinessCardDashboard BusinessCardDashboard)
    {
        try
        {
            await BusinessCardDashboardService.DeleteBusinessCardDashboardAsync(BusinessCardDashboard.BusinessCardDashboardId, ModuleState.ModuleId);
            await logger.LogInformation("BusinessCardDashboard Deleted {BusinessCardDashboard}", BusinessCardDashboard);
            _BusinessCardDashboards = await BusinessCardDashboardService.GetBusinessCardDashboardsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting BusinessCardDashboard {BusinessCardDashboard} {Error}", BusinessCardDashboard, ex.Message);
            AddModuleMessage("Error Deleting BusinessCardDashboard", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            _fileManager.GetFileId();
            BusinessCardDashboard BusinessCardDashboard = new BusinessCardDashboard();
            BusinessCardDashboard.ModuleId = ModuleState.ModuleId;
            BusinessCardDashboard.Name = _name;
            BusinessCardDashboard.Type = _type;

            _fileid = _fileManager.GetFileId();

            if (_fileid != -1)
            {
                BusinessCardDashboard.LinkUrl = ContentUrl(_fileid);
            }

            string tmpLink = PageState.Uri.Authority + BusinessCardDashboard.LinkUrl;

            this.HandleValidSubmit(tmpLink);

            BusinessCardDashboard.QrCode = @Convert.ToBase64String(image);

            BusinessCardDashboard = await BusinessCardDashboardService.AddBusinessCardDashboardAsync(BusinessCardDashboard);

            await logger.LogInformation("BusinessCardDashboard Added {BusinessCardDashboard}", BusinessCardDashboard);
            AddModuleMessage("BusinessCardDashboard Created Successfully", MessageType.Success);

            _BusinessCardDashboards = await BusinessCardDashboardService.GetBusinessCardDashboardsAsync(ModuleState.ModuleId);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving BusinessCardDashboard {Error}", ex.Message);
            AddModuleMessage("Error Saving This Account.", MessageType.Error);
        }
    }

    private void HandleValidSubmit(string linkUrl)
    {
        this.image = null;

        QRCoder.QRCodeGenerator qrGenerator = new QRCoder.QRCodeGenerator();
        QRCoder.QRCodeData qrData = qrGenerator.CreateQrCode(
            linkUrl,
            QRCoder.QRCodeGenerator.ECCLevel.Q);
        QRCoder.PngByteQRCode qrCode = new QRCoder.PngByteQRCode(qrData);

        this.image = qrCode.GetGraphic(20);
    }
}