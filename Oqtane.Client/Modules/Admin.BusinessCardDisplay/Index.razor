@using Admin.BusinessCardDisplay.Services
@using Admin.BusinessCardDisplay.Models

@using Admin.BusinessCardDashboard.Services
@using Admin.BusinessCardDashboard.Models

@namespace Admin.BusinessCardDisplay
@inherits ModuleBase
@inject IBusinessCardDisplayService BusinessCardDisplayService
@inject IBusinessCardDashboardService BusinessCardDashboardService
@inject NavigationManager NavigationManager

<img src="@path" class="img-fluid" alt="Responsive image">


@code { public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<BusinessCardDisplay> _BusinessCardDisplays;

    BusinessCardDashboard BusinessCardDashboard;

    string path = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            BusinessCardDashboard = await BusinessCardDashboardService.GetBusinessCardDashboardAsync("test", ModuleState.ModuleId);
            if (BusinessCardDashboard != null)
            {
                path = BusinessCardDashboard.LinkUrl;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading BusinessCardDisplay {Error}", ex.Message);
            AddModuleMessage("Error Loading BusinessCardDisplay", MessageType.Error);
        }
    }

    private async Task Delete(BusinessCardDisplay BusinessCardDisplay)
    {
        try
        {
            await BusinessCardDisplayService.DeleteBusinessCardDisplayAsync(BusinessCardDisplay.BusinessCardDisplayId, ModuleState.ModuleId);
            await logger.LogInformation("BusinessCardDisplay Deleted {BusinessCardDisplay}", BusinessCardDisplay);
            _BusinessCardDisplays = await BusinessCardDisplayService.GetBusinessCardDisplaysAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting BusinessCardDisplay {BusinessCardDisplay} {Error}", BusinessCardDisplay, ex.Message);
            AddModuleMessage("Error Deleting BusinessCardDisplay", MessageType.Error);
        }
    } }